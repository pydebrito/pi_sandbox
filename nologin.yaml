# nb -v run driver=cql yaml=cql-latest_login tags=phase:schema host=dsehost
description: |
  Time-series data model and access patterns. (use cql-timeseries instead)
  This is the same a cql-timeseries, which is the preferred name as it is
  more canonical. This workload is retained for historic reasons.

scenarios:
  default:
    schema: run driver=cql tags==phase:schema threads==1 cycles==UNDEF
    rampup: run driver=cql tags==phase:rampup cycles===TEMPLATE(rampup-cycles,1000) threads=auto
#    main: run driver=cql tags==phase:main cycles===TEMPLATE(main-cycles,10000000) threads=auto
params:
  instrument: TEMPLATE(instrument,false)
bindings:
  user_id: Mod(10000); ToHashedUUID() -> java.util.UUID
  time: Div(10); Mul(86400000); StartingEpochMillis('2021-01-01 00:00:00'); ToDate();
  id_bucket: Mod(100)
blocks:
  - tags:
      phase: schema
    params:
      prepared: false
    statements:
     - create-keyspace: |
        create keyspace if not exists <<keyspace:expiry_feature>>
        WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '<<rf:1>>'}
        AND durable_writes = true;
       tags:
         name: create-keyspace
     - create-table : |
        create table if not exists <<keyspace:expiry_feature>>.<<table:latest_login>> (
        day timestamp,    
        id_bucket bigint,        
        user_id UUID,     
        PRIMARY KEY ((day, id_bucket), user_id)
        ) WITH CLUSTERING ORDER BY (user_id DESC)
         AND compression = { 'sstable_compression' : '<<compression:LZ4Compressor>>' }
         AND compaction = {
         'class': 'LeveledCompactionStrategy'
        };
       tags:
         name: create-table
     - truncate-table: |
         truncate table <<keyspace:expiry_feature>>.<<table:latest_login>>;
       tags:
         name: truncate-table
  - tags:
      phase: rampup
    params:
      cl: <<write_cl:LOCAL_QUORUM>>
    statements:
     - insert-rampup: |
        insert into  <<keyspace:expiry_feature>>.<<table:latest_login>>
        (day, user_id, id_bucket)
        values ({time}, {user_id}, {id_bucket})
       idempotent: true
       tags:
         name: insert-rampup
       params:
         instrument: TEMPLATE(instrument-writes,TEMPLATE(instrument,false))
     - delete-rampup: |
        delete from  <<keyspace:expiry_feature>>.<<table:latest_login>>
        where day={time} and user_id={user_id} and id_bucket={id_bucket}
       idempotent: true
       tags:
         name: delete-rampup
       params:
         instrument: TEMPLATE(instrument-writes,TEMPLATE(instrument,false))
  - tags:
      phase: verify
      type: read
    params:
      ratio: 1
      cl: <<read_cl:LOCAL_QUORUM>>
    statements:
     - select-verify: |
         select * from <<keyspace:expiry_feature>>.<<table:latest_login>>
         where user_id={user_id} and sensor_name={sensor_name} and time={time};
       verify-fields: "*, -cell_timestamp"
       tags:
         name: select-verify
       params:
         instrument: TEMPLATE(instrument-reads,TEMPLATE(instrument,false))
  - tags:
      phase: main
      type: read
    params:
      ratio: <<read_ratio:1>>
      cl: <<read_cl:LOCAL_QUORUM>>
    statements:
     - select-read: |
         select * from <<keyspace:expiry_feature>>.<<table:latest_login>>
         where user_id={user_id} and sensor_name={sensor_name}
         limit <<limit:10>>
       tags:
         name: select-read
       params:
         instrument: TEMPLATE(instrument-reads,TEMPLATE(instrument,false))

  - tags:
      phase: main
      type: write
    params:
      ratio: <<write_ratio:9>>
      cl: <<write_cl:LOCAL_QUORUM>>
    statements:
     - insert-main: |
        insert into <<keyspace:expiry_feature>>.<<table:latest_login>>
        (user_id, sensor_name, time, sensor_value, station_id, data)
        values ({user_id}, {sensor_name}, {time}, {sensor_value}, {station_id}, {data})
        using timestamp {cell_timestamp}
       idempotent: true
       tags:
         name: insert-main
       params:
         instrument: TEMPLATE(instrument-writes,TEMPLATE(instrument,false))

